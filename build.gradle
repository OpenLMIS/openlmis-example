import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.22.RELEASE"
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0"
    id "org.sonarqube" version "2.2.1"
    id "com.moowork.node" version "0.12"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    ossrhUsername = System.getenv("OSSRH_USERNAME")
    ossrhPassword = System.getenv("OSSRH_PASSWORD")
}
ext.set("signing.secretKeyRingFile", ".signing/secring.gpg")
ext.set("signing.keyId", System.getenv("SIGNING_KEYID"))
ext.set("signing.password", System.getenv("SIGNING_PASSWORD"))

group = serviceGroup
version = serviceVersion
archivesBaseName = serviceName
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.projectlombok:lombok:1.16.8"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.postgresql:postgresql:9.4.1208"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-integration"
    compile "org.springframework.integration:spring-integration-jdbc"
    compile "com.github.tomakehurst:wiremock:1.58"
    compile "com.google.code.gson:gson:2.6.2"
    compile "org.springframework:spring-test"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile 'org.webjars:swagger-ui:2.2.6'
    compile 'org.openlmis:openlmis-service-util:3.0.0'

    testCompile 'io.rest-assured:rest-assured:3.0.0'
    testCompile 'io.rest-assured:json-schema-validator:3.0.0'
    testCompile 'io.rest-assured:spring-mock-mvc:3.0.0'
    testCompile "com.jayway.restassured:rest-assured:2.7.0"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "guru.nidi.raml:raml-tester:0.8.9"

    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core:1.+"

    runtime fileTree(dir: '/extensions/', include: '*.jar')
}

flyway {
    url = "$System.env.DATABASE_URL"
    user = "$System.env.POSTGRES_USER"
    password = "$System.env.POSTGRES_PASSWORD"
    schemas = ['example']
    sqlMigrationPrefix = ''
    placeholderPrefix = '#['
    placeholderSuffix = ']'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
    }
    environment 'BASE_URL', "http://localhost"
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${testResultsDir}/${name}")
}

// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration << {
    def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
    def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
    def fullFileName = "${timestamp}__${fileName}.sql"
    def migrationFile = new File(sourceSets.main.resources.srcDirs.first(),'db/migration/'+fullFileName)
    migrationFile.createNewFile()
}


test {
    testLogging {
        events 'started', 'passed'
    }
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

checkstyle {
    toolVersion = "7.1"
}

//Usage: gradle sonarqube
sonarqube {
    properties {
        property "sonar.projectName", "OpenLMIS Example"
        property "sonar.projectKey", "org.sonarqube:openlmis-example"
        property "sonar.host.url", "http://sonar.openlmis.org"
        property "sonar.java.coveragePlugin", "jacoco"
        //Tells SonarQube where the unit tests execution reports are
        property "sonar.junit.reportsPath", "build/test-results/test"
        //Tells SonarQube where the unit tests code coverage report is
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        //Tells SonarQube where the integration tests code coverage report is
        property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
        properties["sonar.tests"] += sourceSets.integrationTest.java
    }
}

build.dependsOn jacocoTestReport
build.dependsOn check // Makes sure checkstyle is run before build completes

pmd {
    toolVersion = '5.4.0'
    consoleOutput= true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}

def time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
time.setTimeZone(TimeZone.getTimeZone("GMT"))

def versionToCopy = copySpec {
    from 'src/main/resources'
    include 'version_template'
}

task generateBuildInfo(type:Copy) {
    with versionToCopy
    into 'build/resources/main'
    rename { 'version.properties' }
    expand([
            build: "$System.env.BUILD_NUMBER", // ${build}
            branch: "$System.env.GIT_BRANCH", // ${branch}
            time: time.format(new Date()) + " GMT" // ${time}
    ])
    doLast{
        delete 'src/main/resources/version_template'
    }
}

signing {
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
signArchives.onlyIf {project.findProperty("signing.keyId") && project.findProperty("signing.password")}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name projectName
                packaging 'jar'
                description projectDescription

                licenses {
                    license {
                        name 'GNU Affero General Public License, Version 3'
                        url 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }
            }
        }
    }
}
uploadArchives.onlyIf { project.getProperty("ossrhUsername") && project.getProperty("ossrhPassword") }

apply from: "documentation.gradle"
integrationTest.dependsOn copyRamlToBuild

processResources {
    // we want the generated swagger spec file included in the output jar
    finalizedBy ramlToSwagger

    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

apply from: "registration.gradle"

build {
    dependsOn check
    dependsOn jacocoTestReport
}

check {
    dependsOn ramlToHtml
    dependsOn ramlToSwagger
    dependsOn copyRamlHtmlToBuild
    dependsOn integrationTest
    dependsOn copyConsulRegistrationToBuild
    finalizedBy uploadArchives
}
